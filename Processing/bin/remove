#!/usr/bin/env python
#---------------------------------------------------------------------------------------------------
# Script to remove a file.
#
# Author: C.Paus                                                                      (May 06, 2010)
#---------------------------------------------------------------------------------------------------
import os,sys,getopt,re,srm
t2user = os.environ['TIER2_USER']

def debugPrint(text):
    if debug:
        print ' DEBUG: ' + text

def execute(cmd,debug):
    if debug:
        print ' DEBUG: ' + cmd
    else:
        os.system(cmd)

def clean(file):
    if   re.search('dcap:',file):
        g = file.split('/')
        file = '/'.join(g[3:])
    debugPrint(' Cleaned: ' + file)

    return file


def exists(target):
    if   re.search('/castor/cern.ch/',target):
        debugPrint(' Identified a castor directory: ' + target)
        cmd = 'rfdir ' + target
    elif re.search('/pnfs/cmsaf.mit.edu/',target):
        debugPrint(' Identified a tier-2 directory: ' + target)
        cmd = 'ssh ' + t2user + '@cgate.mit.edu ls -1 ' + target + ' \>\& /dev/null'
    elif re.search('/mnt/hadoop/cms/store',target):
        debugPrint(' Identified a tier-2 hadoop directory: ' + target)
        target = srm.convertToUrl(target,debug)
        cmd = 'srmls ' + target + ' >& /dev/null'
    else:
        debugPrint(' Identified a normal directory: ' + target)
        cmd = 'ls -1 ' + target + '>& /dev/null'
            
    status = os.system(cmd)
    debugPrint(' Status: %d (on %s)' %(status,cmd))

    return (status == 0)

def remove(source):
    if   re.search('/castor/cern.ch/',source):
        debugPrint(' Identified castor file')
        cmd = "stager_rm -M " + source + "; nsrm " + source
    elif re.search('/pnfs/cmsaf.mit.edu/',source):
        debugPrint(' Identified tier-2 file')
        cmd = 'ssh ' + t2user + '@cgate.mit.edu rm -rf ' + source
    elif re.search('/mnt/hadoop/cms/store/user/paus',source):
        debugPrint(' Identified a tier-2 hadoop directory: ' + source)
        source = srm.convertToUrl(source,debug)
        cmd = 'srmrm ' + source + ' >& /dev/null'
    else:
        debugPrint(' Identified a normal directory')
        cmd = 'rm -rf ' + source

    # ready to perform the requested operation
    debugPrint('  -> removing with: ' + cmd)
    status = 0
    if exe == 1:
        status = os.system(cmd)
        if status != 0:
            print ' ERROR: remove returned error %d (on %s)'%(status,cmd)

    return status

def removeCatalog(source,debug):
    tmp = os.getpid()
    pid = "%d"%tmp
    # which catalog is this one in?
    catalogDir = '/home/cmsprod/catalog/local'
    if   re.search('/castor/cern.ch/',source):
        catalogDir = '/home/cmsprod/catalog/cern'
    elif re.search('/pnfs/cmsaf.mit.edu/',source) or \
         re.search('/mnt/hadoop/cms/store/user/paus',source):
        catalogDir = '/home/cmsprod/catalog/t2mit'
    # now get the dataset and the book
    f       = source.split('/')
    file    = f[-1]
    dataset = f[-2]
    book    = f[-4] + '/' + f[-3]

    dir     = catalogDir + '/' + book + '/' + dataset

    # now remove the particular file from the record
    cmd = 'cat ' + dir + '/RawFiles.?? | sort -u | grep -v ' + file + ' > /tmp/RawFiles.00.' + pid
    execute(cmd,debug)
    cmd = 'rm ' + dir + '/RawFiles.??'
    execute(cmd,debug)
    cmd = 'mv /tmp/RawFiles.00.' + pid + ' ' + dir + '/RawFiles.00'
    execute(cmd,debug)
    cmd = 'cat ' + dir + '/Files | grep -v ' + file + ' > /tmp/Files.' + pid
    execute(cmd,debug)
    cmd = 'mv /tmp/Files.' + pid + ' ' + dir + '/Files'
    execute(cmd,debug)

    return

#===================================================================================================
# Main starts here
#===================================================================================================
# Define string to explain usage of the script
usage =  "Usage: remove  <source>"
usage += "               --exe\n"
usage += "               --catalog\n"
usage += "               --debug\n"
usage += "               --help\n"

# Define the valid options which can be specified and check out the command line
valid = ['exe','catalog','debug','help']
try:
    opts, args = getopt.getopt(sys.argv[1:], "", valid)
except getopt.GetoptError, ex:
    print usage
    print str(ex)
    sys.exit(1)

# --------------------------------------------------------------------------------------------------
# Get all parameters for the production
# --------------------------------------------------------------------------------------------------
# Set defaults for each option
catalog = False
debug   = False
exe     = 0

# Read new values from the command line
for opt, arg in opts:
    #print ' OPT , ARG: ' + opt + ' ' + arg
    if   opt == '--help':
        print usage
        sys.exit(0)
    elif opt == '--debug':
        debug   = True
    elif opt == '--catalog':
        catalog = True
    elif opt == '--exe':
        exe     = 1

newArgv = []
for arg in sys.argv[1:]:
    #print ' ARG: ' + arg
    if arg[:2] == "--":
        continue
    else:
        newArgv.append(arg)

# Define source and target
source = clean(newArgv[0])

# Test whether the source exists
if   exists(source):
    debugPrint("\n Removing: " + source)
    remove(source)
elif not exists(source):
    print ' ERROR: the source ('+source+') does not exist.'

# Remove also the catalog entry
if catalog:
    removeCatalog(source,debug)
